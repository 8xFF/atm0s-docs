"use strict";(self.webpackChunkatm_0_s_docs=self.webpackChunkatm_0_s_docs||[]).push([[7523],{7582:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var i=s(3010),t=s(1421);const r={title:"Consume a stream"},o="Consume a stream",c={id:"client/consuming",title:"Consume a stream",description:"Overview",source:"@site/docs/client/consuming.mdx",sourceDirName:"client",slug:"/client/consuming",permalink:"/media-docs/docs/client/consuming",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/client/consuming.mdx",tags:[],version:"current",frontMatter:{title:"Consume a stream"},sidebar:"tutorialSidebar",previous:{title:"Connecting to Session",permalink:"/media-docs/docs/client/connect"},next:{title:"Publishing a stream",permalink:"/media-docs/docs/client/publishing"}},a={},d=[{value:"Overview",id:"overview",level:2},{value:"Listen for stream added events",id:"listen-for-stream-added-events",level:2},{value:"Simulcast",id:"simulcast",level:2},{value:"Consumer Events",id:"consumer-events",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"consume-a-stream",children:"Consume a stream"}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"While being connected to a session, a peer can subscribe to listen to any stream published to the session. The stream can be published by the peer itself or by another peer connected to the session."}),"\n",(0,i.jsx)(n.h2,{id:"listen-for-stream-added-events",children:"Listen for stream added events"}),"\n",(0,i.jsxs)(n.p,{children:["To listen for stream added events, you need to register a listener for the ",(0,i.jsx)(n.code,{children:"stream_added"})," event. The event handler receives a ",(0,i.jsx)(n.code,{children:"StreamRemote"})," object as an argument.\nThe ",(0,i.jsx)(n.code,{children:"StreamRemote"})," object contains the following properties:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"kind"}),": The type of the stream. Can be ",(0,i.jsx)(n.code,{children:"video"})," or ",(0,i.jsx)(n.code,{children:"audio"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"peerId"}),": The peer ID of the peer who published the stream."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"peerHash"}),": The peer hash of the peer who published the stream."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"}),": The name of the stream. Which is the same as the name of which the peer who published the stream assigned."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Having the ",(0,i.jsx)(n.code,{children:"StreamRemote"})," object, you can subscribe to the stream by creating a new ",(0,i.jsx)(n.code,{children:"consumer"}),".\nAnd view the stream by calling the ",(0,i.jsx)(n.code,{children:"view"})," method on the ",(0,i.jsx)(n.code,{children:"consumer"})," object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'session.on("stream_added", (stream) => {\n  const consumer = session.createConsumer(stream);\n  const stream = consumer.view("key");\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The view method takes a required argument ",(0,i.jsx)(n.code,{children:"key"})," which is the key for the Session to keep track of. Mostly used for limiting the simulcast layers."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["If you want to listen to your own stream, you can use the ",(0,i.jsx)(n.code,{children:"mystream_added"})," event instead of the ",(0,i.jsx)(n.code,{children:"stream_added"})," event."]})}),"\n",(0,i.jsx)(n.h2,{id:"simulcast",children:"Simulcast"}),"\n",(0,i.jsxs)(n.p,{children:["If the stream is published with simulcast, you can specify which layers you want to view by passing the limit parameter to the view method.\nThe limit parameter is a ",(0,i.jsx)(n.code,{children:"StreamLimit"})," object which contains the following properties:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"priority"}),": The priority of the layer. Can be any positive integer. This is to specify which layer to view first."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"maxSpatial"}),": The maximum spatial layer to view. Can be any positive integer."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"maxTemporal"}),": The maximum temporal layer to view. Can be any positive integer."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"minSpatial"}),": The minimum spatial layer to view (Optional)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"minTemporal"}),": The minimum temporal layer to view (Optional)."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'consumer.view("key", {\n  priority: 50,\n  maxSpatial: 2,\n  maxTemporal: 2,\n  minSpatial: 1,\n  minTemporal: 1,\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:["or use the ",(0,i.jsx)(n.code,{children:"limit"})," method on the ",(0,i.jsx)(n.code,{children:"consumer"})," object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"consumer.limit({\n  priority: 50,\n  maxSpatial: 2,\n  maxTemporal: 2,\n  minSpatial: 1,\n  minTemporal: 1,\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"consumer-events",children:"Consumer Events"}),"\n",(0,i.jsxs)(n.p,{children:["You can subscribe to the following events on the ",(0,i.jsx)(n.code,{children:"consumer"})," object by using the ",(0,i.jsx)(n.code,{children:"on"})," method:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"audio_level"})," - Fired when the audio level of the stream changes. The event handler receives a ",(0,i.jsx)(n.code,{children:"number"})," as an argument."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"state"})," - Fired when the state of the stream changes. The event handler receives a ",(0,i.jsx)(n.code,{children:"string"})," as an argument. The possible values are ",(0,i.jsx)(n.code,{children:"no_source"}),", ",(0,i.jsx)(n.code,{children:"connecting"}),", ",(0,i.jsx)(n.code,{children:"live"}),", ",(0,i.jsx)(n.code,{children:"paused"}),", ",(0,i.jsx)(n.code,{children:"key_only"}),", ",(0,i.jsx)(n.code,{children:"source_deactivated"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"quality"})," - Fired when the quality of the stream changes. The event handler receives a ",(0,i.jsx)(n.code,{children:"RemoteStreamQuality"})," object as an argument. The object contains the following properties:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"peer"}),": The peer ID of the peer who published the stream."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"}),": The name of the stream. Which is the same as the name of which the peer who published the stream assigned."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"kind"}),": The type of the stream. Can be ",(0,i.jsx)(n.code,{children:"video"})," or ",(0,i.jsx)(n.code,{children:"audio"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mos"}),": The mean opinion score of the stream."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"slot"}),": The slot of the stream."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1421:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>o});var i=s(5170);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);